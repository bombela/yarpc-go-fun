// Code generated by thriftrw

package loadbalancerclient

import (
	"github.com/bombela/yarpc-go-fun/broker"
	"github.com/bombela/yarpc-go-fun/broker/service/loadbalancer"
	"github.com/thriftrw/thriftrw-go/protocol"
	"github.com/thriftrw/thriftrw-go/wire"
	yarpc "github.com/yarpc/yarpc-go"
	"github.com/yarpc/yarpc-go/encoding/thrift"
	"github.com/yarpc/yarpc-go/transport"
)

type Interface interface {
	AddBackend(reqMeta yarpc.CallReqMeta, endpoint *string) (yarpc.CallResMeta, error)
	Backends(reqMeta yarpc.CallReqMeta) ([]*broker.BackendStatus, yarpc.CallResMeta, error)
	DelBackend(reqMeta yarpc.CallReqMeta, endpoint *string) (yarpc.CallResMeta, error)
}

func New(c transport.Channel) Interface {
	return client{c: thrift.New(thrift.Config{Service: "LoadBalancer", Channel: c, Protocol: protocol.Binary})}
}

type client struct{ c thrift.Client }

func (c client) AddBackend(reqMeta yarpc.CallReqMeta, endpoint *string) (resMeta yarpc.CallResMeta, err error) {
	args := loadbalancer.AddBackendHelper.Args(endpoint)
	var body wire.Value
	body, resMeta, err = c.c.Call(reqMeta, args)
	if err != nil {
		return
	}
	var result loadbalancer.AddBackendResult
	if err = result.FromWire(body); err != nil {
		return
	}
	err = loadbalancer.AddBackendHelper.UnwrapResponse(&result)
	return
}

func (c client) Backends(reqMeta yarpc.CallReqMeta) (success []*broker.BackendStatus, resMeta yarpc.CallResMeta, err error) {
	args := loadbalancer.BackendsHelper.Args()
	var body wire.Value
	body, resMeta, err = c.c.Call(reqMeta, args)
	if err != nil {
		return
	}
	var result loadbalancer.BackendsResult
	if err = result.FromWire(body); err != nil {
		return
	}
	success, err = loadbalancer.BackendsHelper.UnwrapResponse(&result)
	return
}

func (c client) DelBackend(reqMeta yarpc.CallReqMeta, endpoint *string) (resMeta yarpc.CallResMeta, err error) {
	args := loadbalancer.DelBackendHelper.Args(endpoint)
	var body wire.Value
	body, resMeta, err = c.c.Call(reqMeta, args)
	if err != nil {
		return
	}
	var result loadbalancer.DelBackendResult
	if err = result.FromWire(body); err != nil {
		return
	}
	err = loadbalancer.DelBackendHelper.UnwrapResponse(&result)
	return
}
