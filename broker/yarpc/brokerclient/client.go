// Code generated by thriftrw

package brokerclient

import (
	"github.com/bombela/yarpc-go-fun/broker"
	broker2 "github.com/bombela/yarpc-go-fun/broker/service/broker"
	"github.com/thriftrw/thriftrw-go/protocol"
	"github.com/thriftrw/thriftrw-go/wire"
	yarpc "github.com/yarpc/yarpc-go"
	"github.com/yarpc/yarpc-go/encoding/thrift"
	"github.com/yarpc/yarpc-go/transport"
)

type Interface interface {
	ActiveSubscription(reqMeta yarpc.CallReqMeta) ([]*broker.SubscribedTopic, yarpc.CallResMeta, error)
	Poll(reqMeta yarpc.CallReqMeta, key *string, maxMsgs *int32) ([]string, yarpc.CallResMeta, error)
	Publish(reqMeta yarpc.CallReqMeta, topic *string, message *string) (yarpc.CallResMeta, error)
	Subscribe(reqMeta yarpc.CallReqMeta, topic *string) (string, yarpc.CallResMeta, error)
}

func New(c transport.Channel) Interface {
	return client{c: thrift.New(thrift.Config{Service: "Broker", Channel: c, Protocol: protocol.Binary})}
}

type client struct{ c thrift.Client }

func (c client) ActiveSubscription(reqMeta yarpc.CallReqMeta) (success []*broker.SubscribedTopic, resMeta yarpc.CallResMeta, err error) {
	args := broker2.ActiveSubscriptionHelper.Args()
	var body wire.Value
	body, resMeta, err = c.c.Call(reqMeta, args)
	if err != nil {
		return
	}
	var result broker2.ActiveSubscriptionResult
	if err = result.FromWire(body); err != nil {
		return
	}
	success, err = broker2.ActiveSubscriptionHelper.UnwrapResponse(&result)
	return
}

func (c client) Poll(reqMeta yarpc.CallReqMeta, key *string, maxMsgs *int32) (success []string, resMeta yarpc.CallResMeta, err error) {
	args := broker2.PollHelper.Args(key, maxMsgs)
	var body wire.Value
	body, resMeta, err = c.c.Call(reqMeta, args)
	if err != nil {
		return
	}
	var result broker2.PollResult
	if err = result.FromWire(body); err != nil {
		return
	}
	success, err = broker2.PollHelper.UnwrapResponse(&result)
	return
}

func (c client) Publish(reqMeta yarpc.CallReqMeta, topic *string, message *string) (resMeta yarpc.CallResMeta, err error) {
	args := broker2.PublishHelper.Args(topic, message)
	var body wire.Value
	body, resMeta, err = c.c.Call(reqMeta, args)
	if err != nil {
		return
	}
	var result broker2.PublishResult
	if err = result.FromWire(body); err != nil {
		return
	}
	err = broker2.PublishHelper.UnwrapResponse(&result)
	return
}

func (c client) Subscribe(reqMeta yarpc.CallReqMeta, topic *string) (success string, resMeta yarpc.CallResMeta, err error) {
	args := broker2.SubscribeHelper.Args(topic)
	var body wire.Value
	body, resMeta, err = c.c.Call(reqMeta, args)
	if err != nil {
		return
	}
	var result broker2.SubscribeResult
	if err = result.FromWire(body); err != nil {
		return
	}
	success, err = broker2.SubscribeHelper.UnwrapResponse(&result)
	return
}
