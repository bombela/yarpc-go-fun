// Code generated by thriftrw

package loadbalancerserver

import (
	"github.com/bombela/yarpc-go-fun/broker"
	"github.com/bombela/yarpc-go-fun/broker/service/loadbalancer"
	"github.com/thriftrw/thriftrw-go/protocol"
	"github.com/thriftrw/thriftrw-go/wire"
	yarpc "github.com/yarpc/yarpc-go"
	"github.com/yarpc/yarpc-go/encoding/thrift"
)

type Interface interface {
	AddBackend(reqMeta yarpc.ReqMeta, endpoint *string) (yarpc.ResMeta, error)
	Backends(reqMeta yarpc.ReqMeta) ([]*broker.BackendStatus, yarpc.ResMeta, error)
	DelBackend(reqMeta yarpc.ReqMeta, endpoint *string) (yarpc.ResMeta, error)
}

func New(impl Interface) thrift.Service {
	return service{handler{impl}}
}

type service struct{ h handler }

func (service) Name() string {
	return "LoadBalancer"
}

func (service) Protocol() protocol.Protocol {
	return protocol.Binary
}

func (s service) Handlers() map[string]thrift.Handler {
	return map[string]thrift.Handler{"add_backend": thrift.HandlerFunc(s.h.AddBackend), "backends": thrift.HandlerFunc(s.h.Backends), "del_backend": thrift.HandlerFunc(s.h.DelBackend)}
}

type handler struct{ impl Interface }

func (h handler) AddBackend(reqMeta yarpc.ReqMeta, body wire.Value) (thrift.Response, error) {
	var args loadbalancer.AddBackendArgs
	if err := args.FromWire(body); err != nil {
		return thrift.Response{}, err
	}
	resMeta, err := h.impl.AddBackend(reqMeta, args.Endpoint)
	hadError := err != nil
	result, err := loadbalancer.AddBackendHelper.WrapResponse(err)
	var response thrift.Response
	if err == nil {
		response.IsApplicationError = hadError
		response.Meta = resMeta
		response.Body = result
	}
	return response, err
}

func (h handler) Backends(reqMeta yarpc.ReqMeta, body wire.Value) (thrift.Response, error) {
	var args loadbalancer.BackendsArgs
	if err := args.FromWire(body); err != nil {
		return thrift.Response{}, err
	}
	success, resMeta, err := h.impl.Backends(reqMeta)
	hadError := err != nil
	result, err := loadbalancer.BackendsHelper.WrapResponse(success, err)
	var response thrift.Response
	if err == nil {
		response.IsApplicationError = hadError
		response.Meta = resMeta
		response.Body = result
	}
	return response, err
}

func (h handler) DelBackend(reqMeta yarpc.ReqMeta, body wire.Value) (thrift.Response, error) {
	var args loadbalancer.DelBackendArgs
	if err := args.FromWire(body); err != nil {
		return thrift.Response{}, err
	}
	resMeta, err := h.impl.DelBackend(reqMeta, args.Endpoint)
	hadError := err != nil
	result, err := loadbalancer.DelBackendHelper.WrapResponse(err)
	var response thrift.Response
	if err == nil {
		response.IsApplicationError = hadError
		response.Meta = resMeta
		response.Body = result
	}
	return response, err
}
