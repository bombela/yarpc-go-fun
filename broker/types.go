// Code generated by thriftrw

package broker

import (
	"errors"
	"fmt"
	"github.com/thriftrw/thriftrw-go/wire"
	"strings"
)

type SubscribedTopic struct {
	Topic       string `json:"topic"`
	Subscribers int64  `json:"subscribers"`
}

func (v *SubscribedTopic) ToWire() (wire.Value, error) {
	var (
		fields [2]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	w, err = wire.NewValueString(v.Topic), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 1, Value: w}
	i++
	w, err = wire.NewValueI64(v.Subscribers), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 2, Value: w}
	i++
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *SubscribedTopic) FromWire(w wire.Value) error {
	var err error
	topicIsSet := false
	subscribersIsSet := false
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TBinary {
				v.Topic, err = field.Value.GetString(), error(nil)
				if err != nil {
					return err
				}
				topicIsSet = true
			}
		case 2:
			if field.Value.Type() == wire.TI64 {
				v.Subscribers, err = field.Value.GetI64(), error(nil)
				if err != nil {
					return err
				}
				subscribersIsSet = true
			}
		}
	}
	if !topicIsSet {
		return errors.New("field Topic of SubscribedTopic is required")
	}
	if !subscribersIsSet {
		return errors.New("field Subscribers of SubscribedTopic is required")
	}
	return nil
}

func (v *SubscribedTopic) String() string {
	var fields [2]string
	i := 0
	fields[i] = fmt.Sprintf("Topic: %v", v.Topic)
	i++
	fields[i] = fmt.Sprintf("Subscribers: %v", v.Subscribers)
	i++
	return fmt.Sprintf("SubscribedTopic{%v}", strings.Join(fields[:i], ", "))
}
