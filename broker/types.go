// Code generated by thriftrw

package broker

import (
	"errors"
	"fmt"
	"github.com/thriftrw/thriftrw-go/wire"
	"strings"
)

type BackendStatus struct {
	Endpoint string  `json:"endpoint"`
	Status   *string `json:"status,omitempty"`
}

func (v *BackendStatus) ToWire() (wire.Value, error) {
	var (
		fields [2]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	w, err = wire.NewValueString(v.Endpoint), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 1, Value: w}
	i++
	if v.Status != nil {
		w, err = wire.NewValueString(*(v.Status)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 2, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *BackendStatus) FromWire(w wire.Value) error {
	var err error
	endpointIsSet := false
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TBinary {
				v.Endpoint, err = field.Value.GetString(), error(nil)
				if err != nil {
					return err
				}
				endpointIsSet = true
			}
		case 2:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Status = &x
				if err != nil {
					return err
				}
			}
		}
	}
	if !endpointIsSet {
		return errors.New("field Endpoint of BackendStatus is required")
	}
	return nil
}

func (v *BackendStatus) String() string {
	var fields [2]string
	i := 0
	fields[i] = fmt.Sprintf("Endpoint: %v", v.Endpoint)
	i++
	if v.Status != nil {
		fields[i] = fmt.Sprintf("Status: %v", *(v.Status))
		i++
	}
	return fmt.Sprintf("BackendStatus{%v}", strings.Join(fields[:i], ", "))
}
