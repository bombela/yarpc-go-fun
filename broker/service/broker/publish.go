// Code generated by thriftrw

package broker

import (
	"fmt"
	"github.com/thriftrw/thriftrw-go/wire"
	"strings"
)

type PublishArgs struct {
	Topic   *string `json:"topic,omitempty"`
	Message *string `json:"message,omitempty"`
}

func (v *PublishArgs) ToWire() (wire.Value, error) {
	var (
		fields [2]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.Topic != nil {
		w, err = wire.NewValueString(*(v.Topic)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}
	if v.Message != nil {
		w, err = wire.NewValueString(*(v.Message)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 2, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *PublishArgs) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Topic = &x
				if err != nil {
					return err
				}
			}
		case 2:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Message = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *PublishArgs) String() string {
	var fields [2]string
	i := 0
	if v.Topic != nil {
		fields[i] = fmt.Sprintf("Topic: %v", *(v.Topic))
		i++
	}
	if v.Message != nil {
		fields[i] = fmt.Sprintf("Message: %v", *(v.Message))
		i++
	}
	return fmt.Sprintf("PublishArgs{%v}", strings.Join(fields[:i], ", "))
}

func (v *PublishArgs) MethodName() string {
	return "publish"
}

func (v *PublishArgs) EnvelopeType() wire.EnvelopeType {
	return wire.Call
}

type PublishResult struct{}

func (v *PublishResult) ToWire() (wire.Value, error) {
	var (
		fields [0]wire.Field
		i      int = 0
	)
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *PublishResult) FromWire(w wire.Value) error {
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		}
	}
	return nil
}

func (v *PublishResult) String() string {
	var fields [0]string
	i := 0
	return fmt.Sprintf("PublishResult{%v}", strings.Join(fields[:i], ", "))
}

func (v *PublishResult) MethodName() string {
	return "publish"
}

func (v *PublishResult) EnvelopeType() wire.EnvelopeType {
	return wire.Reply
}

var PublishHelper = struct {
	IsException    func(error) bool
	Args           func(topic *string, message *string) *PublishArgs
	WrapResponse   func(error) (*PublishResult, error)
	UnwrapResponse func(*PublishResult) error
}{}

func init() {
	PublishHelper.IsException = func(err error) bool {
		switch err.(type) {
		default:
			return false
		}
	}
	PublishHelper.Args = func(topic *string, message *string) *PublishArgs {
		return &PublishArgs{Topic: topic, Message: message}
	}
	PublishHelper.WrapResponse = func(err error) (*PublishResult, error) {
		if err == nil {
			return &PublishResult{}, nil
		}
		return nil, err
	}
	PublishHelper.UnwrapResponse = func(result *PublishResult) (err error) {
		return
	}
}
