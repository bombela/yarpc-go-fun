// Code generated by thriftrw

package broker

import (
	"errors"
	"fmt"
	"github.com/thriftrw/thriftrw-go/wire"
	"strings"
)

type PollArgs struct {
	Key     *string `json:"key,omitempty"`
	MaxMsgs *int32  `json:"maxMsgs,omitempty"`
}

func (v *PollArgs) ToWire() (wire.Value, error) {
	var (
		fields [2]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.Key != nil {
		w, err = wire.NewValueString(*(v.Key)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}
	if v.MaxMsgs != nil {
		w, err = wire.NewValueI32(*(v.MaxMsgs)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 2, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *PollArgs) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Key = &x
				if err != nil {
					return err
				}
			}
		case 2:
			if field.Value.Type() == wire.TI32 {
				var x int32
				x, err = field.Value.GetI32(), error(nil)
				v.MaxMsgs = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *PollArgs) String() string {
	var fields [2]string
	i := 0
	if v.Key != nil {
		fields[i] = fmt.Sprintf("Key: %v", *(v.Key))
		i++
	}
	if v.MaxMsgs != nil {
		fields[i] = fmt.Sprintf("MaxMsgs: %v", *(v.MaxMsgs))
		i++
	}
	return fmt.Sprintf("PollArgs{%v}", strings.Join(fields[:i], ", "))
}

func (v *PollArgs) MethodName() string {
	return "poll"
}

func (v *PollArgs) EnvelopeType() wire.EnvelopeType {
	return wire.Call
}

type PollResult struct {
	Success []string `json:"success"`
}

type _List_String_ValueList []string

func (v _List_String_ValueList) ForEach(f func(wire.Value) error) error {
	for _, x := range v {
		w, err := wire.NewValueString(x), error(nil)
		if err != nil {
			return err
		}
		err = f(w)
		if err != nil {
			return err
		}
	}
	return nil
}

func (v _List_String_ValueList) Size() int {
	return len(v)
}

func (_List_String_ValueList) ValueType() wire.Type {
	return wire.TBinary
}

func (_List_String_ValueList) Close() {
}

func (v *PollResult) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.Success != nil {
		w, err = wire.NewValueList(_List_String_ValueList(v.Success)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 0, Value: w}
		i++
	}
	if i != 1 {
		return wire.Value{}, fmt.Errorf("PollResult should have exactly one field: got %v fields", i)
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _List_String_Read(l wire.ValueList) ([]string, error) {
	if l.ValueType() != wire.TBinary {
		return nil, nil
	}
	o := make([]string, 0, l.Size())
	err := l.ForEach(func(x wire.Value) error {
		i, err := x.GetString(), error(nil)
		if err != nil {
			return err
		}
		o = append(o, i)
		return nil
	})
	l.Close()
	return o, err
}

func (v *PollResult) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 0:
			if field.Value.Type() == wire.TList {
				v.Success, err = _List_String_Read(field.Value.GetList())
				if err != nil {
					return err
				}
			}
		}
	}
	count := 0
	if v.Success != nil {
		count++
	}
	if count != 1 {
		return fmt.Errorf("PollResult should have exactly one field: got %v fields", count)
	}
	return nil
}

func (v *PollResult) String() string {
	var fields [1]string
	i := 0
	if v.Success != nil {
		fields[i] = fmt.Sprintf("Success: %v", v.Success)
		i++
	}
	return fmt.Sprintf("PollResult{%v}", strings.Join(fields[:i], ", "))
}

func (v *PollResult) MethodName() string {
	return "poll"
}

func (v *PollResult) EnvelopeType() wire.EnvelopeType {
	return wire.Reply
}

var PollHelper = struct {
	IsException    func(error) bool
	Args           func(key *string, maxMsgs *int32) *PollArgs
	WrapResponse   func([]string, error) (*PollResult, error)
	UnwrapResponse func(*PollResult) ([]string, error)
}{}

func init() {
	PollHelper.IsException = func(err error) bool {
		switch err.(type) {
		default:
			return false
		}
	}
	PollHelper.Args = func(key *string, maxMsgs *int32) *PollArgs {
		return &PollArgs{Key: key, MaxMsgs: maxMsgs}
	}
	PollHelper.WrapResponse = func(success []string, err error) (*PollResult, error) {
		if err == nil {
			return &PollResult{Success: success}, nil
		}
		return nil, err
	}
	PollHelper.UnwrapResponse = func(result *PollResult) (success []string, err error) {
		if result.Success != nil {
			success = result.Success
			return
		}
		err = errors.New("expected a non-void result")
		return
	}
}
